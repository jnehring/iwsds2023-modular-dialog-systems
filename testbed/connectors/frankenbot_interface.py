# connector to create a chatbot in frankenbot and chat with it using the web api
# author: jan nehring, 12/2020

import os
import json
import shutil
import requests
import urllib
import logging
from testbed.config import Config
from testbed.connectors.connector import ChatbotConnector
from testbed.connectors.chatbot_response import IntentClassifierResponse
import shutil

class FrankenbotInterface(ChatbotConnector):
    
    module_name="auto"
    session_id=None

    def __init__(self, name="frankenbot"):
        self.name=name
    
    def create_frankenbot_json(self, df):

        dialog_tree=[]
        intents=df["intent"].unique()
        for intent in intents:
            node={
                "parent_node": None,
                "type": "tree_node",
                "intent_name": "#" + intent,
                "response_generator": {
                    "mode": "sequential",
                    "responses": [intent],
                    "type": "simple_response_generator"
                },
                "node_id": len(dialog_tree)
            }
            dialog_tree.append(node)

        json={
            "type": "bot",
            "name": "Jans Test Bot",
            "welcome_message": "Hi, I am the test bot.",
            "fallback_message": "I cant hear you. Can you please speak a bit louder?",
            "dialog_manager": {
                "type": "max_activation_dialog_manager",
                "modules": [{
                    "module_id": self.module_name,
                    "module_name": self.module_name,
                    "type": "dialog_tree",
                    "dialog_tree": dialog_tree
                }]
            }
        }
        return json

    def create_nlu_json(self, df):
        common_examples=[]
        intents=df["intent"].unique()
        for intent in intents:
            examples=[]
            used_utterances=set()
            for ix, row in df[df["intent"]==intent].iterrows():
                if row["utterance"] in used_utterances:
                    continue

                used_utterances.add(row["utterance"])
                common_examples.append({
                    "text": row["utterance"],
                    "intent": "#"+intent,
                    "entities": []
                })
        json= {
            "rasa_nlu_data": {
                "common_examples": common_examples
            }
        }
        return json

    def setup_data(self, df):

        # frankenbot.json
        frankenbot_json=self.create_frankenbot_json(df)

        config=Config.get()

        outputdir=config["default"]["output_dir"] + "/autogenerated_frankenbot"

        if os.path.exists(outputdir):
            shutil.rmtree(outputdir)
        #os.makedirs(outputdir)
        os.makedirs(outputdir)
 

        self.write_json(frankenbot_json, outputdir+"/frankenbot.json")
        rasa_dir=outputdir + "/rasa"
        os.makedirs(rasa_dir)

        # rasa data - module json
        rasa_json=self.create_nlu_json(df)
        self.write_json(rasa_json, f"{rasa_dir}/{self.module_name}.json")

        # rasa configuration file
        shutil.copyfile("assets/config_spacy.yaml", f"{rasa_dir}/config_spacy.yaml")

        logging.info("created frankenbot chatbot definition in " + os.path.abspath(outputdir))

    # setup method for mod_ir project
    def setup_data_mod_ir(self, df, type):

            # frankenbot.json
            frankenbot_json=self.create_frankenbot_json(df)

            config=Config.get()

            outputdir=config["default"]["output_dir"] + "/autogenerated_frankenbot"+ "_" + type

            if os.path.exists(outputdir):
                shutil.rmtree(outputdir)
            #os.makedirs(outputdir)
            os.makedirs(outputdir)
    

            self.write_json(frankenbot_json, outputdir+"/frankenbot.json")
            rasa_dir=outputdir + "/rasa"
            os.makedirs(rasa_dir)

            # rasa data - module json
            rasa_json=self.create_nlu_json(df)
            self.write_json(rasa_json, f"{rasa_dir}/{self.module_name}.json")

            # rasa configuration file
            shutil.copyfile("assets/config_spacy.yaml", f"{rasa_dir}/config_spacy.yaml")

            logging.info("created frankenbot chatbot definition in " + os.path.abspath(outputdir))

    def write_json(self, data, filename):
        json_str=json.dumps(data, indent=4)
        with open(filename, "w") as file:
            file.write(json_str)

    def chat(self, message):

        config=Config.get()

        if self.session_id == None and "session_id" in config["frankenbot"]:
            self.session_id=config["frankenbot"]["session_id"]

        if self.session_id == None:
            logging.info("creating frankenbot session id")
            url=config["frankenbot"]["api_url"]+"?utterance=hallo&user_session_id=null"
            # url=config["frankenbot"]["api_url"]+"?utterance=meeting_reminder&user_session_id=null"
            response=requests.get(url).json()
            logging.debug(response)
            self.session_id=response["session_id"]
            logging.info("generated session id " + self.session_id)

        query_string={
            "utterance": message,
            "user_session_id": self.session_id
        }
        query_string=urllib.parse.urlencode(query_string)
        url=config["frankenbot"]["api_url"]  + "?" + query_string
        logging.debug(url)
        response = requests.get(url).json()
        if len(response["chatbot_output"])==0:
            logging.debug("try again") 
            response = requests.get(url).json()

        logging.debug(json.dumps(response, indent=4))

        intent=response["chatbot_output"]["active_module"]["module_output"]["recognized_intent"]
        confidence=response["chatbot_output"]["active_module"]["activation_value"]
        if intent == "":
            intent=None
        else:
            intent=intent[1:]   # strip # in the beginning of the intent

        response=IntentClassifierResponse(self.name, intent, confidence)
        return response
